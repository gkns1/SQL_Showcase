select distinct FileName, etq$number, MajorVersion, 
b.ActionCode as ActionCode, CurriculumMajorVersion, CurriculumMinorVersion, CurriculumAP, CourseAP, CURRICULA_ID, COURSE_NAME, COURSE_NUMBER, CurCode, cast(COURSE_DESCRIPTION as nvarchar(max)) as COURSE_DESCRIPTION, TYPE, TrainingItemCode,TrainingItemType FROM (select 'A' as ActionCode,
'0' as CurriculumMajorVersion,
'0' as CurriculumMinorVersion,
'T' as CurriculumAP,
'TI' as CourseAP,
REQUIREMENT_GROUP.REQUIREMENT_GROUP_ID as CURRICULA_ID,
REQUIREMENT_GROUP.NAME_REQUIREMENT_GROUP AS COURSE_NAME,
REQUIREMENT_GROUP.ETQ$NUMBER AS COURSE_NUMBER,
'REDACTED'+REQUIREMENT_GROUP.ETQ$NUMBER as CurCode,
NULL as COURSE_DESCRIPTION,
'RG' as TYPE,
CASE WHEN lower(NAME_REQUIREMENT_GROUP) like '%distributor%' or lower(NAME_REQUIREMENT_GROUP) like '%third party field service%' 
THEN 'Vendors'
ELSE 'Internal'
END AS HIERARCHICAL_NAME,
TRAINING_REQUIREMENT.ETQ$NUMBER AS REQUIREMENT_NUMBER
FROM
TRAINING.REQUIREMENT_GROUP REQUIREMENT_GROUP
LEFT JOIN TRAINING.GROUP_REQUIREMENTS AS GROUP_REQUIREMENTS ON (REQUIREMENT_GROUP.REQUIREMENT_GROUP_ID = GROUP_REQUIREMENTS.REQUIREMENT_GROUP_ID)
left join TRAINING.ETQ$REQUIREMENT_GROUP_LOCS LOCS on REQUIREMENT_GROUP.REQUIREMENT_GROUP_ID = LOCS.REQUIREMENT_GROUP_ID
left join [DATACENTER].[LOCATION_PROFILE] d_loc 
on d_loc.LOCATION_PROFILE_ID = locs.ETQ$LOCATIONS_ID
LEFT JOIN TRAINING.TRAINING_REQUIREMENT AS TRAINING_REQUIREMENT ON (GROUP_REQUIREMENTS.REQUIREMENTS = TRAINING_REQUIREMENT.REQUIREMENT_ID)
LEFT JOIN ENGINE.BOOLEAN_VALUES BOOLEAN_VALUES_1 ON ( TRAINING_REQUIREMENT.OBSOLETE = BOOLEAN_VALUES_1.VALUE )
WHERE BOOLEAN_VALUES_1.DESCRIPTION &lt;&gt; 'Yes'
AND REQUIREMENT_GROUP.NAME_REQUIREMENT_GROUP NOT LIKE 'REDACTED_GROUP%' 

UNION all
SELECT
'A' as ActionCode,
'0' as CurriculumMajorVersion,
'0' as CurriculumMinorVersion,
'T' as CurriculumAP,
'TI' as CourseAP,
COURSE_PROFILE.COURSE_PROFILE_ID as CURRICULA_ID,
COURSE_PROFILE.COURSE_NAME AS COURSE_NAME,
COURSE_PROFILE.ETQ$NUMBER AS COURSE_NUMBER,
'REDACTED_2'+COURSE_PROFILE.ETQ$NUMBER as CurCode,
COURSE_PROFILE.COURSE_DESCRIPTION COURSE_DESCRIPTION,
'CP' as TYPE,
CASE WHEN lower(COURSE_NAME) like '%distributor%' or lower(COURSE_NAME) like '%third party field service%' 
THEN 'Vendors'
Else 'Internal'
END AS HIERARCHICAL_NAME,
TR.ETQ$NUMBER AS REQUIREMENT_NUMBER
FROM
TRAINING.COURSE_PROFILE COURSE_PROFILE 
left join TRAINING.ETQ$COURSE_PROFILE_LOCS LOCS on COURSE_PROFILE.COURSE_PROFILE_ID = LOCS.COURSE_PROFILE_ID
left join [DATACENTER].[LOCATION_PROFILE] d_loc 
on d_loc.LOCATION_PROFILE_ID = locs.ETQ$LOCATIONS_ID
LEFT JOIN TRAINING.PROFILE_REQUIREMENTS_MET AS REQUIREMENTS ON (COURSE_PROFILE.COURSE_PROFILE_ID = REQUIREMENTS.COURSE_PROFILE_ID)
LEFT JOIN TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = REQUIREMENTS.PROFILE_REQUIREMENTS_MET_ID
where COURSE_PROFILE.COURSE_TYPE not in (Redacted#, Redacted#2)
and COURSE_PROFILE.ETQ$NUMBER NOT IN (Redacted#3, Redacted#4)
union all
SELECT
'A' as ActionCode,
'0' as CurriculumMajorVersion,
'0' as CurriculumMinorVersion,
'T' as CurriculumAP,
'TI' as CourseAP,
COURSE_PROFILE.COURSE_PROFILE_ID as CURRICULA_ID,
COURSE_PROFILE.COURSE_NAME AS COURSE_NAME,
COURSE_PROFILE.ETQ$NUMBER AS COURSE_NUMBER,
'REDACTED_2'+COURSE_PROFILE.ETQ$NUMBER as CurCode,
COURSE_PROFILE.COURSE_DESCRIPTION COURSE_DESCRIPTION,
'CP' as TYPE,
'Internal' AS HIERARCHICAL_NAME,
TR.ETQ$NUMBER AS REQUIREMENT_NUMBER
FROM
TRAINING.COURSE_PROFILE COURSE_PROFILE 
left join TRAINING.ETQ$COURSE_PROFILE_LOCS LOCS on COURSE_PROFILE.COURSE_PROFILE_ID = LOCS.COURSE_PROFILE_ID
left join [DATACENTER].[LOCATION_PROFILE] d_loc 
on d_loc.LOCATION_PROFILE_ID = locs.ETQ$LOCATIONS_ID
LEFT JOIN TRAINING.PROFILE_REQUIREMENTS_MET AS REQUIREMENTS ON (COURSE_PROFILE.COURSE_PROFILE_ID = REQUIREMENTS.COURSE_PROFILE_ID)
LEFT JOIN TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = REQUIREMENTS.PROFILE_REQUIREMENTS_MET_ID
where COURSE_PROFILE.COURSE_TYPE not in (Redacted#, Redacted#2)
and COURSE_PROFILE.ETQ$NUMBER IN (Redacted#3, Redacted#4)
union all
SELECT
'A' as ActionCode,
'0' as CurriculumMajorVersion,
'0' as CurriculumMinorVersion,
'T' as CurriculumAP,
'TI' as CourseAP,
COURSE_PROFILE.COURSE_PROFILE_ID as CURRICULA_ID,
COURSE_PROFILE.COURSE_NAME AS COURSE_NAME,
COURSE_PROFILE.ETQ$NUMBER AS COURSE_NUMBER,
'REDACTED_3'+COURSE_PROFILE.ETQ$NUMBER as CurCode,
COURSE_PROFILE.COURSE_DESCRIPTION COURSE_DESCRIPTION,
'CP' as TYPE,
'Vendors' AS HIERARCHICAL_NAME,
TR.ETQ$NUMBER AS REQUIREMENT_NUMBER
FROM
TRAINING.COURSE_PROFILE COURSE_PROFILE 
left join TRAINING.ETQ$COURSE_PROFILE_LOCS LOCS on COURSE_PROFILE.COURSE_PROFILE_ID = LOCS.COURSE_PROFILE_ID
left join [DATACENTER].[LOCATION_PROFILE] d_loc 
on d_loc.LOCATION_PROFILE_ID = locs.ETQ$LOCATIONS_ID
LEFT JOIN TRAINING.PROFILE_REQUIREMENTS_MET AS REQUIREMENTS ON (COURSE_PROFILE.COURSE_PROFILE_ID = REQUIREMENTS.COURSE_PROFILE_ID)
LEFT JOIN TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = REQUIREMENTS.PROFILE_REQUIREMENTS_MET_ID
where COURSE_PROFILE.COURSE_TYPE not in (Redacted#, Redacted#2)
and COURSE_PROFILE.ETQ$NUMBER IN (Redacted#3, Redacted#4)
and TR.REQUIREMENT_ID IS NOT NULL ) main
left join (select distinct
COURSENUM,
(
		select  count(
			case
				when 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) like '%.pdf%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '% att %' AND 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachment%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachement%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attach,%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) NOT LIKE '%appendix%'
				then 
					COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)
				else null 
			end) as FileNameCount
		from TRAINING.REQUIREMENT_DOCUMENT AS REQ_DOC 
		LEFT JOIN TRAINING.ETQ$DOCUMENT_LINKS LINKS ON LINKS.LINK_ID = REQ_DOC.REQUIREMENT_DOCUMENT_ID

		LEFT JOIN DOCWORK.DOCWORK_DOCUMENT DD ON DD.DOCWORK_ID = LINKS.DOCUMENT_ID
		LEFT JOIN DOCWORK.DOCWORK_ATTACHMENTS DA ON DA.DOCWORK_ID = DD.DOCWORK_ID

		LEFT JOIN DOCARC.DOCWORK_DOCUMENT DD_ARC ON DD_ARC.DOCWORK_ID = LINKS.DOCUMENT_ID
		LEFT JOIN DOCARC.DOCWORK_ATTACHMENTS DA_ARC ON DA_ARC.DOCWORK_ID = DD_ARC.DOCWORK_ID
		WHERE REQ_DOC.REQUIREMENT_ID = allreqs.REQUIREMENT_ID
		AND 
			(
			case
				when 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) like '%.pdf%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '% att %' AND 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachment%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachement%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attach,%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) NOT LIKE '%appendix%'
				then 					
					COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)
				else null 
			end
			) IS NOT NULL
	) as FileNameCount,
'Internal' as organisation_default,
coalesce((select top 1 CASE WHEN upper(RG.NAME_REQUIREMENT_GROUP) = 'DISTRIBUTOR' OR upper(RG.NAME_REQUIREMENT_GROUP) LIKE '%THIRD PARTY FIELD SERVICE%' THEN 'Internal|Vendors' END as HomeOrgRG
		from TRAINING.GROUP_REQUIREMENTS gr
			join TRAINING.REQUIREMENT_GROUP rg
				on gr.REQUIREMENT_GROUP_ID = RG.REQUIREMENT_GROUP_ID
		where gr.requirements = allreqs.REQUIREMENT_ID
		order by HomeorgRG desc
	),'Internal') as HomeOrganization,
	case
		when right(REQUIREMENT_NAME,1) = '.' then 'Yes'
		else 'No'
	end AS TRAILING_PERIOD,
	case
		when allreqs.ETQ$NUMBER IN ('REDACTED#5','REDACTED#6','REDACTED#7','REDACTED#8') THEN 'Yes'	
		else 'No'
	end as Duplicated,
case 
		when allreqs.ETQ$NUMBER = 'REDACTED#5' then 'REDACTED#9'
		when allreqs.ETQ$NUMBER = 'REDACTED#6' then 'REDACTED#10'
		when allreqs.ETQ$NUMBER = 'REDACTED#7' then 'REDACTED#11'
		when allreqs.ETQ$NUMBER = 'REDACTED#8' then 'REDACTED#12'
		else allreqs.ETQ$NUMBER
	end as MERGE_WITH,
'A' as ActionCode,
	CASE	
		WHEN MigType = 'REDACTED_TYPE2'  then 'Read and Understand'
		WHEN MigType = 'REDACTED_TYPE' THEN 'Instructor Led Course'
	END AS TrainingItemSubType, 
CASE 
		WHEN MigType =  'REDACTED_TYPE' Then '2'
		WHEN MigType = 'REDACTED_TYPE2' Then '4'
		 ELSE '8'
END as TrainingItemType,
'0' as MinorVersion,
'General' as Category,
'30' as InitialDueIn,
'dd' as InitialDueInDP,
case when MigType = 'REDACTED_TYPE' Then '1'
end as PassFail,
case when MigType = 'REDACTED_TYPE' Then '0'
end as AllowOnlineRegistration,
case 		WHEN COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME) is null then 'CQ-' + allreqs.ETQ$NUMBER
		WHEN COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME) is not null then cast(COALESCE(DD.ETQ$NUMBER, DD_ARC.ETQ$NUMBER) as varchar(100))
end as TrainingItemCode,
allreqs.REQUIREMENT_ID as REQUIREMENT_ID,
allreqs.OBSOLETE AS OBSOLETE,
allreqs.REQUIREMENT_TYPE AS REQUIREMENT_TYPE,
allreqs.REQUIREMENT_NAME AS REQUIREMENT_NAME,
allreqs.ETQ$NUMBER AS ETQ$NUMBER,
cast(COALESCE(DD_RH.ETQ$RH_EFFECTIVE_DATE, DD_ARC_RH.ETQ$RH_EFFECTIVE_DATE) as date) AS EFFECTIVE_DATE,
	cast(DD_ARC_PT.ETQ$COMPLETED_DATE as date) AS COMPLETED_DATE, 

	cast(COALESCE(DD.ETQ$CREATED_DATE, DD_ARC.ETQ$CREATED_DATE) as date) AS CREATED_DATE,
	cast(COALESCE(DD.ORIGINATION_DATE, DD_ARC.ORIGINATION_DATE) as date) AS ORIGINATION_DATE,
COALESCE(DD.ETQ$REVISION, DD_ARC.ETQ$REVISION) as Major_Version,
cast(COALESCE(DD_RH.ETQ$RH_REASON, DD_ARC_RH.ETQ$RH_REASON) as nvarchar(max)) as REASON_FOR_CHANGE,
cast(COALESCE(DD.JUSTIFICATION_FOR_CHANGE, DD_ARC.JUSTIFICATION_FOR_CHANGE) as nvarchar(max)) as JUSTIFICATION_FOR_CHANGE,
	CASE 	
		WHEN COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME) is null then allreqs.REQUIREMENT_NAME
		WHEN COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME) is not null then COALESCE(DD.TITLE, DD_ARC.TITLE) + ', ' + COALESCE(WF_SETTINGS_1.DISPLAY_NAME,WF_SETTINGS_ARC.DISPLAY_NAME) + ' # ' + cast(COALESCE(DD.ETQ$NUMBER, DD_ARC.ETQ$NUMBER) as varchar(100)) + ' rev. ' + COALESCE(DD.ETQ$revision, DD_ARC.ETQ$revision) 
	END AS TITLE,	
(
		select  TOP 1  
			case
				when 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) like '%.pdf%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '% att %' AND 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachment%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachement%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attach,%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) NOT LIKE '%appendix%'
				then left(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME),len(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) - charindex('.',reverse(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME))+'.')) + '_' + cast(COALESCE(DD.DOCWORK_ID, DD_ARC.DOCWORK_ID) as nvarchar(50)) + right (COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME), charindex('.',reverse(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME))+'.')) 
				else null 
			end as FileName
		from TRAINING.REQUIREMENT_DOCUMENT AS REQ_DOC 
		LEFT JOIN TRAINING.ETQ$DOCUMENT_LINKS LINKS ON LINKS.LINK_ID = REQ_DOC.REQUIREMENT_DOCUMENT_ID

		LEFT JOIN DOCWORK.DOCWORK_DOCUMENT DD ON DD.DOCWORK_ID = LINKS.DOCUMENT_ID
		LEFT JOIN DOCWORK.DOCWORK_ATTACHMENTS DA ON DA.DOCWORK_ID = DD.DOCWORK_ID

		LEFT JOIN DOCARC.DOCWORK_DOCUMENT DD_ARC ON DD_ARC.DOCWORK_ID = LINKS.DOCUMENT_ID
		LEFT JOIN DOCARC.DOCWORK_ATTACHMENTS DA_ARC ON DA_ARC.DOCWORK_ID = DD_ARC.DOCWORK_ID
		WHERE REQ_DOC.REQUIREMENT_ID = allreqs.REQUIREMENT_ID
		AND 
			(
			case
				when 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) like '%.pdf%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '% att %' AND 
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachment%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attachement%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) not like '%attach,%' AND
					lower(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) NOT LIKE '%appendix%'
				then left(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME),len(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME)) - charindex('.',reverse(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME))+'.')) + '_' + cast(COALESCE(DD.DOCWORK_ID, DD_ARC.DOCWORK_ID) as nvarchar(50)) + right (COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME), charindex('.',reverse(COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME))+'.'))
--COALESCE(DA.FILE_NAME, DA_ARC.FILE_NAME) 
				else null 
			end
			) IS NOT NULL
		ORDER BY 1
	) as FileName,
dense_RANK() OVER (PARTITION BY coalesce(DD.ETQ$NUMBER,DD_ARC.ETQ$NUMBER,allreqs.ETQ$NUMBER) order by ALLREQS.ETQ$CREATED_DATE ASC) as MajorVersion
from
(SELECT DISTINCT 'REDACTED_2'+course.ETQ$NUMBER AS COURSENUM,TR.REQUIREMENT_ID, TR.OBSOLETE, TR.REQUIREMENT_TYPE, TR.REQUIREMENT_NAME, TR.ETQ$NUMBER, TR.ETQ$CREATED_DATE, 'REDACTED_TYPE' as MigType
	FROM TRAINING.COURSE_PROFILE course
	LEFT JOIN
	TRAINING.PROFILE_REQUIREMENTS_MET AS reqs ON (course.COURSE_PROFILE_ID = reqs.COURSE_PROFILE_ID)
	LEFT JOIN 
	TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = reqs.PROFILE_REQUIREMENTS_MET_ID
	where requirement_id is not null
	union
	SELECT DISTINCT 'REDACTED_2'+course.ETQ$NUMBER AS COURSENUM,TR.REQUIREMENT_ID, TR.OBSOLETE, TR.REQUIREMENT_TYPE, TR.REQUIREMENT_NAME, TR.ETQ$NUMBER, TR.ETQ$CREATED_DATE, case 
		when TR.REQUIREMENT_TYPE = 1 then 'REDACTED_TYPE'
		else 'REDACTED_TYPE2' end as MigType
	FROM TRAINING.COURSE_PROFILE course
	LEFT JOIN
	TRAINING.PROFILE_REQUIREMENTS_MET AS reqs ON (course.COURSE_PROFILE_ID = reqs.COURSE_PROFILE_ID)
	LEFT JOIN 
	TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = reqs.PROFILE_REQUIREMENTS_MET_ID
	where requirement_id is not null
	union
	SELECT DISTINCT 'REDACTED_3'+course.ETQ$NUMBER AS COURSENUM,TR.REQUIREMENT_ID, TR.OBSOLETE, TR.REQUIREMENT_TYPE, TR.REQUIREMENT_NAME, TR.ETQ$NUMBER, TR.ETQ$CREATED_DATE, 'REDACTED_TYPE' as MigType
	FROM TRAINING.COURSE_PROFILE course
	LEFT JOIN
	TRAINING.PROFILE_REQUIREMENTS_MET AS reqs ON (course.COURSE_PROFILE_ID = reqs.COURSE_PROFILE_ID)
	LEFT JOIN 
	TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = reqs.PROFILE_REQUIREMENTS_MET_ID
	where requirement_id is not null
	union
	SELECT DISTINCT 'REDACTED_3'+course.ETQ$NUMBER AS COURSENUM,TR.REQUIREMENT_ID, TR.OBSOLETE, TR.REQUIREMENT_TYPE, TR.REQUIREMENT_NAME, TR.ETQ$NUMBER, TR.ETQ$CREATED_DATE, case 
		when TR.REQUIREMENT_TYPE = 1 then 'REDACTED_TYPE'
		else 'REDACTED_TYPE2' end as MigType
	FROM TRAINING.COURSE_PROFILE course
	LEFT JOIN
	TRAINING.PROFILE_REQUIREMENTS_MET AS reqs ON (course.COURSE_PROFILE_ID = reqs.COURSE_PROFILE_ID)
	LEFT JOIN 
	TRAINING.TRAINING_REQUIREMENT TR ON TR.REQUIREMENT_ID = reqs.PROFILE_REQUIREMENTS_MET_ID
	where requirement_id is not null
	union
	SELECT DISTINCT 'REDACTED'+REQUIREMENT_GROUP.ETQ$NUMBER AS COURSENUM, TR.REQUIREMENT_ID, TR.OBSOLETE, TR.REQUIREMENT_TYPE, TR.REQUIREMENT_NAME, TR.ETQ$NUMBER, TR.ETQ$CREATED_DATE, 
case 
		when TR.REQUIREMENT_TYPE = 1 then 'REDACTED_TYPE'
		else 'REDACTED_TYPE2' end as MigType
	FROM 
	TRAINING.TRAINING_REQUIREMENT TR
	LEFT JOIN TRAINING.GROUP_REQUIREMENTS GROUP_REQUIREMENTS on GROUP_REQUIREMENTS.REQUIREMENTS = TR.REQUIREMENT_ID
	LEFT JOIN TRAINING.REQUIREMENT_GROUP REQUIREMENT_GROUP on GROUP_REQUIREMENTS.REQUIREMENT_GROUP_ID = REQUIREMENT_GROUP.REQUIREMENT_GROUP_ID
) allreqs
LEFT JOIN TRAINING.REQUIREMENT_DOCUMENT AS REQ_DOC ON (allreqs.REQUIREMENT_ID = REQ_DOC.REQUIREMENT_ID)
LEFT JOIN TRAINING.ETQ$DOCUMENT_LINKS LINKS ON LINKS.LINK_ID = REQ_DOC.REQUIREMENT_DOCUMENT_ID
LEFT JOIN DOCWORK.DOCWORK_DOCUMENT DD ON DD.DOCWORK_ID = LINKS.DOCUMENT_ID
LEFT JOIN DOCWORK.DOCWORK_ATTACHMENTS DA ON DA.DOCWORK_ID = DD.DOCWORK_ID and lower(DA.FILE_NAME) like '%.pdf'
LEFT JOIN DOCWORK.ETQ$DOCWORK_DOCUMENT_RH DD_RH ON DD_RH.DOCWORK_ID = DD.DOCWORK_ID and DD_RH.ETQ$RH_REVISION = DD.ETQ$REVISION
LEFT JOIN DOCARC.DOCWORK_DOCUMENT DD_ARC ON DD_ARC.DOCWORK_ID = LINKS.DOCUMENT_ID
LEFT JOIN DOCARC.DOCWORK_ATTACHMENTS DA_ARC ON DA_ARC.DOCWORK_ID = DD_ARC.DOCWORK_ID and lower(DA_ARC.FILE_NAME) like '%.pdf'
LEFT JOIN 
(
	select main1.DOCWORK_ID, ETQ$RH_EFFECTIVE_DATE, ETQ$RH_REASON, ETQ$RH_REVISION
	from DOCARC.ETQ$DOCWORK_DOCUMENT_RH main1
	join (
	select DOCWORK_ID, max(ETQ$RECORD_ORDER) max_order
	from DOCARC.ETQ$DOCWORK_DOCUMENT_RH
	group by docwork_id
	) a
	on a.DOCWORK_ID = main1.DOCWORK_ID
	and a.max_order = main1.ETQ$RECORD_ORDER
) DD_ARC_RH ON DD_ARC_RH.DOCWORK_ID = DD_ARC.DOCWORK_ID 	AND DD_ARC_RH.ETQ$RH_REVISION = DD_ARC.ETQ$REVISION
LEFT JOIN DOCARC.ETQ$DOCWORK_DOCUMENT_PT DD_ARC_PT ON DD_ARC_PT.DOCWORK_ID = DD_ARC.DOCWORK_ID 
	AND DD_ARC_PT.ETQ$PHASE_ID IN (SELECT PHASE_ID FROM ENGINE.PHASE_SETTINGS WHERE lower(DISPLAY_NAME) LIKE 'archive%') 
LEFT JOIN
	ENGINE.PHASE_SETTINGS PHASE_SETTINGS ON (DD.ETQ$CURRENT_PHASE = PHASE_SETTINGS.PHASE_ID)
LEFT JOIN
	ENGINE.WF_SETTINGS WF_SETTINGS_1 ON (PHASE_SETTINGS.WORKFLOW_ID = WF_SETTINGS_1.WORKFLOW_ID )
LEFT JOIN
	ENGINE.PHASE_SETTINGS PHASE_SETTINGS_ARC ON (DD_ARC.ETQ$CURRENT_PHASE = PHASE_SETTINGS_ARC.PHASE_ID)
LEFT JOIN
	ENGINE.WF_SETTINGS WF_SETTINGS_ARC ON (PHASE_SETTINGS_ARC.WORKFLOW_ID = WF_SETTINGS_ARC.WORKFLOW_ID )
 WHERE allreqs.ETQ$NUMBER NOT IN 
('LIST OF 9 REDACTED IDs')
and obsolete = 0
)b
on b.COURSENUM = main.CurCode
where trainingitemcode is not null 
